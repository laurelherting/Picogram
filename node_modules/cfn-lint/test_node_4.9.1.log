
> cfn-lint@0.0.0 test /home/circleci/cfn-lint
> mocha lib/test



  api
    validateFile
      ✓ should validate a file (97ms)
      ✓ should pass properties (82ms)
      ✓ should pass pseudo-parameters (90ms)
      ✓ should reset validator state (90ms)
    validateJsonObject
      ✓ should validate an object (67ms)

  docs
    ✓ resource type
    ✓ resource type property
    ✓ parameter type
    ✓ parameter type property

  index
    CLI - functional tests
      ✓ no parameters (137ms)
      ✓ missing file parameter (129ms)
      ✓ validate simple yaml (348ms)
      ✓ validate parameter flag (346ms)
      ✓ validate importValue flag (335ms)
      ✓ validate numeric importValue flag (326ms)
      ✓ validate pseudo flag (310ms)
      ✓ validate pseudo + parameter flag (319ms)
      ✓ invalid pseudo flag throws 2 critical error (320ms)
      ✓ guess-parameters should explicitely opt in to parameter mocking (315ms)
      ✓ no-guess-parameters throws errors if we leave out parameters (320ms)
      ✓ only-guess-parameters should allow opting in to parameter mocking (348ms)
      ✓ only-guess-parameters should allow opting in to parameter mocking with multiple params (318ms)
      ✓ handle validation exceptions - non-verbose (248ms)
      ✓ handle validation exceptions - verbose (236ms)
      ✓ parameters of the CommaDelimitedList type should accept lists as values (322ms)
      ✓ parameters of the List<Number> type should accept lists as values (333ms)
    CLI - unit tests
      ✓ custom resource attribute parameter should accept an arbitrary attribute value using resource-type notation (140ms)
      ✓ custom resource attribute parameter should accept an arbitrary attribute value using logical-name notation (57ms)
      ✓ custom resource attribute parameter should accept an arbitrary attribute value using mixed notation (49ms)

  parser
    openFile
      ✓ valid yaml should return valid javascript object
      ✓ valid yaml with shorthand should return valid javascript object
      ✓ valid yaml !GetAtt as array should return valid javascript object
      ✓ invalid yaml should throw an Error
      ✓ invalid json should throw an Error
      ✓ invalid file path should throw an Error

  resourceSpec
    getType
      ✓ should return a resource type
      ✓ should return a property type
      ✓ should throw for invalid type
    isValidProperty
      ✓ should return True for AWS::Lambda::Function > Code
      ✓ should return False for AWS::Lambda::Function > MyCode
      ✓ should throw for AWS::Lambda::InvalidFunction > Code
    isRequiredProperty
      ✓ should return True for AWS::IAM::User.Policy > PolicyName
      ✓ should return True for AWS::Lambda::Function > Code
      ✓ should return False for AWS::Lambda::Function > Description
      ✓ should throw for AWS::Lambda::InvalidFunction > Description
    isSinglePrimitivePropertyType
      ✓ should return True for AWS::Lambda::Function > Description
      ✓ should return False for AWS::Lambda::Function > Code
      ✓ should return False for AWS::Lambda::InvalidFunction > Code
    isArnProperty
      ✓ should return True for KmsKeyArn
      ✓ should return True for TopicArn
      ✓ should return False for Code
    getRefOverride
      ✓ should return "arn" for AWS::ECS::Service
      ✓ should return null for AWS::Lambda::Function
    getResourceTypeAttribute
      ✓ should return "String" for AWS::ECS::Service attribute Name
      ✓ should return "List of String" for AWS::Route53::HostedZone attribute NameServers
      ✓ should throw NoSuchResourceTypeAttribute for any attrbute on a type with no attributes
      ✓ should throw NoSuchResourceTypeAttribute for an attrbute that does not exist on a type
    type utilities
      isParameterizedTypeFormat
        ✓ should recognize a non-parameterized Resource-type
        ✓ should recognize a non-parameterized Property-type
        ✓ should recognize a parameterized Resource-type
        ✓ should recognize a parameterized Property-type
        ✓ should recognize a parameterized Resource-type, with nested parameterization
        ✓ should recognize a parameterized Property-type, with nested parameterization
      getParameterizedTypeArgument
        ✓ should throw an error if the provided Resource-type is not parameterized
        ✓ should throw an error if the provided Property-type is not parameterized
        ✓ should return the argument of a parameterized Resource-type
        ✓ should return the argument of a parameterized Property-type
        ✓ should return the argument of a parameterized Resource-type, with nested parameterization
        ✓ should return the argument of a parameterized Property-type, with nested parameterization
      getParameterizedTypeName
        ✓ should throw an error if the provided Resource-type is not parameterized
        ✓ should throw an error if the provided Property-type is not parameterized
        ✓ should return the name of a parameterized Resource-type
        ✓ should return the name of a parameterized Property-type
        ✓ should return the name of a parameterized Resource-type, with nested parameterization
        ✓ should return the name of a parameterized Property-type, with nested parameterization
      parameterizeTypeFormat
        ✓ should parameterize a Resource-type that is not already parameterized
        ✓ should parameterize a Property-type that is not already parameterized
        ✓ should throw an error if the provided Resource-type is already parameterized and sub-parameterization is disallowed
        ✓ should throw an error if the provided Property-type is already parameterized and sub-parameterization is disallowed
        ✓ should parameterize a Resource-type that is already parameterized when sub-parameterization is allowed
        ✓ should parameterize a Property-type that is already parameterized when sub-parameterization is allowed
      stripTypeParameters
        ✓ should be nullipotent on a Resource-type that is not already parameterized
        ✓ should be nullipotent on a Property-type that is not already parameterized
        ✓ should strip parameterization of a Resource-type that is parameterized
        ✓ should strip parameterization of a Property-type that is parameterized
        ✓ should strip parameterization of a Resource-type that is sub-parameterized
        ✓ should strip parameterization of a Property-type that is sub-parameterized
      getPropertyTypeBaseName
        ✓ should throw an error on a non Property-type
        ✓ should return the base type of a Property-type
        ✓ should return the base type of a Property-type that has a parameterized property name
        ✓ should return the base type of a Property-type that has a parameterized base name
        ✓ should return the base type of a Property-type that has a sub-parameterized property name
        ✓ should return the base type of a Property-type that has a sub-parameterized base name
      getPropertyTypePropertyName
        ✓ should throw an error on a non Property-type
        ✓ should return the property name of a Property-type
        ✓ should return the property name of a Property-type that has a parameterized property name
        ✓ should return the property name of a Property-type that has a parameterized base name
        ✓ should return the property name of a Property-type that has a sub-parameterized property name
        ✓ should return the property name of a Property-type that has a sub-parameterized base name
      isTypeFormat
        ✓ should return false for an invalid type
        ✓ should return true for a valid Resource-type
        ✓ should return true for a valid Property-type
        ✓ should return true for a valid Property-type that has a parameterized property name
        ✓ should return true for a valid Property-type that has a parameterized base name
        ✓ should return true for a valid Property-type that has a sub-parameterized property name
        ✓ should return true for a valid Property-type that has a sub-parameterized base name
      isPropertyTypeFormat
        ✓ should return false for an invalid type
        ✓ should return false for a valid Resource-type
        ✓ should return true for a valid Property-type
        ✓ should return true for a valid Property-type that has a parameterized property name
        ✓ should return true for a valid Property-type that has a parameterized base name
        ✓ should return true for a valid Property-type that has a sub-parameterized property name
        ✓ should return true for a valid Property-type that has a sub-parameterized base name
      isResourceTypeFormat
        ✓ should return false for an invalid type
        ✓ should return false for a valid Property-type
        ✓ should return true for a valid Resource-type
        ✓ should return true for a valid parameterized Resource-type
        ✓ should return true for a valid sub-parameterized Resource-type
        ✓ should return false for a valid Property-type that has a parameterized property name
        ✓ should return false for a valid Property-type that has a parameterized base name
        ✓ should return false for a valid Property-type that has a sub-parameterized property name
        ✓ should return false for a valid Property-type that has a sub-parameterized base name
      rebaseTypeFormat
        ✓ should return the primitive value type, given a Resource-type and an primitive value type
        ✓ should return the aggregate type, given a Resource-type and an aggregate type
        ✓ should be able to form a parameterized aggregate type with a valid Property-type as argument, given a Resource-type and a parameterized aggregate type with a property name as argument
        ✓ should be able to form a parameterized aggregate type with a valid Property-type as argument, given a Resource-type and a parameterized aggregate type with a Property-type as argument
        ✓ should be able to form a sub-parameterized aggregate type, given a Resource-type and a sub-parameterized aggregate type with a property name as argument
        ✓ should be able to form a sub-parameterized aggregate type, given a Resource-type and a sub-parameterized aggregate type with a Property-type as argument
        ✓ should be able to form a valid Property-type, given a Resource-type and a property name
        ✓ should be able to form a valid Property-type, given a Resource-type and a Property-type
        ✓ should be able to form a valid Property-type, given a parameterized Resource-type and a Property-type
        ✓ should be able to form a valid Property-type, given a Resource-type and a Property-type that has a parameterized base name
        ✓ should be able to form a valid Property-type, given a Resource-type and a Property-type that has a parameterized argument
        ✓ should be able to form a valid Property-type, given a Resource-type and a Property-type that has a sub-parameterized argument
        ✓ should be able to form a sub-parameterized aggregate type, given a Resource-type and a sub-parameterized aggregate type with an argument of Property-type that has a sub-parameterized argument

  sam2CFN
    CLI - unit tests
      ✓ should be able to correctly process valid parameters

  sam2CFNUtils
    toAWSPrimitiveTypes
      ✓ should be able to convert a JSON "number" type to the corresponding CFN types: "Integer", "Long" and "Double"
      ✓ should be able to convert a JSON "string" type to the corresponding CFN types: "String" and "Timestamp"
      ✓ should be able to convert a JSON "boolean" type to the corresponding CFN type: "Boolean"
      ✓ should throw an exception if provided a non-corresponding type
    buildResourceProperty
      ✓ should be able to construct a property specification that has a static primitive type and is not required
      ✓ should be able to construct a property specification that has a static primitive type and is required
      ✓ should be able to construct a property specification that has a variable type and is not required
      ✓ should be able to construct a property specification that has a variable type and is required
    resolveTypeProperties
      ✓ should be able to resolve type properties from a definition that contains the JSON schema "allOf" operator
      ✓ should be able to resolve type properties from a definition that contains the JSON schema "anyOf" operator
      ✓ should be able to resolve type properties from a definition that contains the JSON schema "oneOf" operator
      ✓ should be able to resolve type properties from a definition that contains a JSON schema with nested operators
    processDefinition
      given a SAM schema definition with properties that employ primitive types
        ✓ should be able to process a SAM schema definition containing a resource type that] has a required primitive property and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required primitive property and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required primitive property
        ✓ should be able to process a SAM schema definition containing a property type that has a not required primitive property
        ✓ should be able to process a SAM schema definition containing a resource type that has a required property with variable primitive type and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required property with variable primitive type and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required property with variable primitive type
        ✓ should be able to process a SAM schema definition containing a property type that has a not required property with variable primitive type
      given a SAM schema definition with properties that employ structured types
        ✓ should be able to process a SAM schema definition containing a resource type that has a required structure property and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required structure property and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required structure property
        ✓ should be able to process a SAM schema definition containing a property type that has a not required structure property
        ✓ should be able to process a SAM schema definition containing a resource type that has a required property with variable structure type and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required property with variable structure type and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required property with variable structure type
        ✓ should be able to process a SAM schema definition containing a property type that has a not required property with variable structure type
      given a SAM schema definition with properties that employ list-type aggregation
        ✓ should be able to process a SAM schema definition containing a resource type that has a required list-type property and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required list-type property and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required list-type property
        ✓ should be able to process a SAM schema definition containing a property type that has a not required list-type property
        ✓ should be able to process a SAM schema definition containing a resource type that has a required property with variable list-type and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required property with variable list-type and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required property with variable list-type
        ✓ should be able to process a SAM schema definition containing a property type that has a not required property with variable list-type
      given a SAM schema definition with properties that employ map-type aggregation
        ✓ should be able to process a SAM schema definition containing a resource type that has a required map-type property and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required map-type property and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required map-type property
        ✓ should be able to process a SAM schema definition containing a property type that has a not required map-type property
        ✓ should be able to process a SAM schema definition containing a resource type that has a required property with variable map-type and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required property with variable map-type and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required property with variable map-type
        ✓ should be able to process a SAM schema definition containing a property type that has a not required property with variable map-type
      miscelaneous
        ✓ should be able to process a SAM schema definition containing a resource type that has a required list-type property which, may contain values of various types, and no additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a not required list-type property which, may contain values of various types
        ✓ should be able to process a SAM schema definition containing a resource type that has a not required map-type property which, may contain values of various types, and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a required map-type property which, may contain values of various types
        ✓ should be able to process a SAM schema definition containing a resource type that has a required Json-type property and additional properties allowed
        ✓ should be able to process a SAM schema definition containing a property type that has a not required Json-type property
    samResourcesSpecification
      given a basic SAM JSON specification
        ✓ should be able to convert it to CFN format
        ✓ should be able to convert it to CFN format, taking into account custom overrides
        ✓ should be able to convert it to CFN format, filtering out invalid resource or property types

  validator
    validateJsonObject
      ✓ a valid (1.json) template should return an object with validTemplate = true, no crit errors (72ms)
      ✓ a valid (2.json) template should return an object with validTemplate = true, no crit errors (76ms)
      ✓ a valid (3.json) template should return an object with validTemplate = true, no crit errors (83ms)
      ✓ a valid (4.json) template should return an object with validTemplate = true, no crit errors (74ms)
      ✓ 2 invalid resource types should return an object with validTemplate = false, 2 crit errors (68ms)
      ✓ 1 missing parameter type should return an object with validTemplate = false, 1 crit errors (69ms)
      ✓ 1 invalid parameter type should return an object with validTemplate = false, 1 crit errors (73ms)
      ✓ missing section resources should return an object with validTemplate = false, 1 crit errors (66ms)
      ✓ empty section resources should return an object with validTemplate = false, 1 crit errors (69ms)
      ✓ 1 invalid resource reference should return an object with validTemplate = false, 1 crit errors (68ms)
      ✓ 1 invalid parameter reference should return an object with validTemplate = false, 1 crit errors (70ms)
      ✓ 2 invalid Fn::Join's should return an object with validTemplate = false, 2 crit errors (73ms)
      ✓ 1 invalid Fn::GetAtt should return an object with validTemplate = false, 1 crit errors (70ms)
      ✓ 1 invalid Fn::FindInMap should return an object with validTemplate = false, 1 crit errors (75ms)
      ✓ 1 invalid Ref within Parameters should return an object with validTemplate = false, 1 crit errors (69ms)
      ✓ 1 invalid GetAZs parameter should return an object with validTemplate = false, 1 crit errors (74ms)
      ✓ 1 reference non AWS::Region GetAZs parameter should return an object with validTemplate = false, 1 warn errors (71ms)
    Fn::Join
      ✓ should error if it attempts to join anything but a list of values (69ms)
    Fn::Select JSON
      ✓ should pass validation, with flat list and intrinsic list (78ms)
      ✓ should pass validation with Parameter Collection (105ms)
      ✓ should error if index is greater than list size (79ms)
      ✓ should error if second element is not a list or a function (81ms)
      ✓ should error if first element is not a number or does not parse to a number (78ms)
      ✓ should error if first element is not defined or is null (85ms)
      ✓ should error if only one element as argument list (71ms)
      ✓ should error if second element is null or undefined (69ms)
      ✓ should error if second element does not resolve to a list (66ms)
      ✓ should error if first element does not resolve to a number (70ms)
      ✓ should error if first element attempts an invalid intrinsic function (69ms)
      ✓ should error if first element is anything other than non-array object, number or string (66ms)
      ✓ should error if second element attempts an invalid intrinsic function (69ms)
      ✓ should error if second element contains a list with null values (67ms)
    Fn::Select YAML
      ✓ should validate in yaml with literal and intrinic elements in array (68ms)
      ✓ should validate in yaml with Comma Separated List Param (69ms)
      ✓ should error if index is greater than list size (79ms)
      ✓ should error if second element is not a list or a function (95ms)
      ✓ should error if first element is not a number or does not parse to a number (89ms)
      ✓ should error if first element is not defined or is null (69ms)
      ✓ should error if only one element as argument list (69ms)
      ✓ should error if second element is null or undefined (67ms)
      ✓ should error if second element does not resolve to a list (66ms)
      ✓ should error if first element does not resolve to a number (70ms)
      ✓ should error if first element attempts an invalid intrinsic function (67ms)
      ✓ should error if first element is anything other than non-array object, number or string (69ms)
      ✓ should error if second element attempts an invalid intrinsic function (67ms)
      ✓ should error if second element contains a list with null values (67ms)
    Fn::Sub
      ✓ 3 valid Fn::Sub should return an object with validTemplate = true, 0 crit errors (96ms)
      ✓ a sub referencing an invalid resource should result in validTemplate = false, 1 crit errors, no warnings (85ms)
      ✓ a sub getatt an invalid resource should result in validTemplate = false, 2 crit errors, no warnings (69ms)
      ✓ a sub with nested intrinsic values should result in validTemplate = true, 0 crit errors, no warnings (69ms)
    Fn::ImportValue
      ✓ 1 invalid Fn::ImportValue should return an object with validTemplate = false, 1 crit errors (67ms)
      ✓ 1 invalid Fn::ImportValue should return an object with validTemplate = false, 1 crit errors (70ms)
      ✓ a valid Fn::ImportValue should return an object with validTemplate = true, 0 crit errors (67ms)
      ✓ an Fn::ImportValue with a correct override should return an object with validTemplate = true, 0 crit errors (70ms)
    Fn::GetAtt
      ✓ Fn::GetAtt for an arbitrary attribute on a custom resource should return a mock result (69ms)
      ✓ should pass validation where !GetAtt returns a list (68ms)
      ✓ should not pass validation where !GetAtt returns a list (71ms)
      ✓ should not pass validation with !GetAtt where attribute does not exist (67ms)
      ✓ should pass validation where !GetAtt returns some unexpected attribute for AWS::CloudFormation::Stack (68ms)
      ✓ should not pass validation with !GetAtt where the resource does not exist (68ms)
    conditions
      ✓ 1 invalid if condition arguments should return an object with validTemplate = false, 1 crit errors (67ms)
      ✓ 1 invalid if condition should return an object with validTemplate = false, 1 crit errors (71ms)
      ✓ 1 invalid condition value should return an object with validTemplate = false, 1 crit errors (68ms)
      ✓ 1 invalid condition value type should return an object with validTemplate = false, 1 crit errors (70ms)
      ✓ 1 valid condition value type should return an object with validTemplate = true, 0 crit errors (72ms)
    Fn::Split
      ✓ should split a basic string
      ✓ should split a string that doesn't contain the delimiter
      ✓ should resolve an intrinsic function
      ✓ should reject a parameter that is an object
      ✓ should reject a parameter that is a string
      ✓ should reject a parameter that is an empty array
      ✓ should reject a parameter that is a single length array
      ✓ should reject a delimiter that isn't a string
      validator test
{ info: [], warn: [], crit: [] }
        ✓ should have no errors
        ✓ should resolve a simple split
        ✓ should resolve a split of a join
        ✓ should resolve a select of a split
    templateVersion
      ✓ 1 invalid template version should return an object with validTemplate = false, 1 crit errors (70ms)
      ✓ 1 missing template version should return an object with validTemplate = true, 0 crit errors (67ms)
    propertyValidation
      ✓ 1 invalid arn property should return an object with validTemplate = false, 1 crit errors (68ms)
      ✓ 1 invalid property name of ResourceType should return an object with validTemplate = false, 1 crit errors (66ms)
      ✓ 1 invalid property name of PropertyType should return an object with validTemplate = false, 1 crit errors (66ms)
      ✓ 1 invalid property name of Tag list should return an object with validTemplate = false, 1 crit errors (69ms)
      ✓ 1 string property should return an object with validTemplate = false, 1 crit errors (67ms)
      ✓ 1 missing propertyType property should return an object with validTemplate = false, 1 crit errors (70ms)
      ✓ 1 missing resourceType  property should return an object with validTemplate = false, 1 crit errors (68ms)
      ✓ 1 missing (via AWS::NoValue) property should return an object with validTemplate = false, 1 crit errors (67ms)
      ✓ 1 invalid boolean property should return an object with validTemplate = false, 1 crit errors (77ms)
      ✓ 4 invalid nested properties should return an object with validTemplate = false, 4 crit errors (72ms)
      ✓ a valid template with a Map property should return an object with validTemplate = true, no crit errors (74ms)
      ✓ an invalid template with a Map property should return an object with validTemplate = false, 1 crit error (93ms)
      ✓ a valid (valid_timestamp.yaml) template with a Timestamp should return an objcet with validTemplate = true (84ms)
      ✓ a (invalid_timestamp.yaml) template with an invalid Timestamp should return an objcet with validTemplate = false, 2 crit errors (70ms)
      ✓ a valid template with APIG string results in validTemplate = true, 0 crit error (74ms)
    validateYamlFile
      ✓ a valid (1.yaml) template should return an object with validTemplate = true, no crit errors (74ms)
      ✓ a valid (2.yaml) template should return an object with validTemplate = true, no crit errors (74ms)
      ✓ a valid (valid_minus_one_as_string.yaml) template should return an object with validTemplate = true, no crit errors (68ms)
    issues
      ✓ a valid ASG template with Tags property should return an object with validTemplate = true, no crit errors (68ms)
      ✓ both methods of defining a custom resource should result in validTemplate = true, no crit errors (69ms)
      ✓ numeric properties should result in validTemplate = true, no crit errors, no warn errors (67ms)
      ✓ IAM with ManagedPolicyName should result in validTemplate=true, no crit errors, no warn errors (67ms)
      ✓ Reference to RDS attribute validTemplate=true, no crit errors, no warn errors (70ms)
      ✓ if condition not working as expected, no crit errors, no warn errors (66ms)
      ✓ if condition not working as expected, 2 crit errors, no warn errors (70ms)
      ✓ a list of an extended parameter type should be properly mocked without causing an exception (67ms)
      ✓ a null property value should not cause an exception (67ms)
      ✓ Fn::Split should support function "Fn::ImportValue" (69ms)
      ✓ a template with properties containing nested aggregate types should be validated successfully (282ms)
      ✓ Issue #214 - SQS Queues now accept Tags (67ms)
      ✓ Issue #221 - Allow sub with split (70ms)
      ✓ Issue #212 - Ref does not account for resources that return ARNS (69ms)
    parameters-validation
      ✓ an unallowed parameter value provided at runtime gets rejected (70ms)
      ✓ an allowed parameter value provided at runtime gets allowed (67ms)
      ✓ an empty parameter value provided at runtime picks up the empty default (which will throw an error) (67ms)
      ✓ missing parameters should cause an error when guessParameters is set (70ms)
      ✓ parameters in guessParameters should be permitted to be guessed (68ms)
      ✓ List<AWS::EC2::AvailabilityZone::Name> should return a list (67ms)
      ✓ List<AWS::EC2::Image::Id> should return a list (70ms)
      ✓ List<AWS::EC2::Instance::Id> should return a list (80ms)
      ✓ List<AWS::EC2::SecurityGroup::GroupName> should return a list (100ms)
      ✓ List<AWS::EC2::SecurityGroup::Id> should return a list (68ms)
      ✓ List<AWS::EC2::Subnet::Id> should return a list (70ms)
      ✓ List<AWS::EC2::Volume::Id> should return a list (67ms)
      ✓ List<AWS::EC2::VPC::Id> should return a list (67ms)
      ✓ List<AWS::Route53::HostedZone::Id> should return a list (70ms)
    pseudo-parmeters
      ✓ defining an override for accountId should result in validTemplate = true, no crit errors, no warnings (68ms)
      ✓ using the pseudo parameter AWS::URLSuffix should result in validTemplate = true, no crit errors, no warnings (70ms)
      ✓ using the pseudo parameter AWS::Partition should result in validTemplate = true, no crit errors, no warnings (68ms)
    custom-resource-attributes
      ✓ should validate using custom resource attribute values for generic and custom types (188ms)
      ✓ should validate using custom resource attribute values for logical-names (188ms)
      ✓ should validate using custom resource attribute values for generic-type and logical-name (187ms)
      ✓ should validate using custom resource attribute values for custom-type and logical-name (188ms)
      ✓ should validate when a logical-name overrides a resource-type custom attribute value (245ms)
    output-references
      ✓ an output referencing an invalid resource should result in validTemplate = false, 1 crit errors, no warnings (71ms)
      ✓ an output referencing an valid resource should result in validTemplate = true, 0 crit errors, no warnings (68ms)
      ✓ a template with an exported output missing a Name should result in validTemplate = false, 1 crit error (68ms)
      a template with an output referencing a resource and a resource attribute
        ✓ should result in a valid template
        ✓ should populate errorObject outputs correctly
        ✓ should populate errorObject exports correctly
    type checking coverage
      ✓ should be able to determine the type of every property of every resource (79ms)
      ✓ should be able to determine the type of every property of every propertytype (151ms)
    type checking unit tests
      isObject
        ✓ {} should be valid
        ✓ {} should be valid
        ✓ {} should be valid
        ✓ 'string' should be invalid
        ✓ [ 'array' ] should be invalid
        ✓ 42 should be invalid
      isList
        ✓ [ 'a', 'b' ] should be valid
        ✓ [ 42 ] should be valid
        ✓ 'string' should be invalid
        ✓ 42 should be invalid
        ✓ {} should be invalid
      isArn
        ✓ 'arn:aws:region:something' should be valid
        ✓ 'arn:aws::::' should be valid
        ✓ 'notarn:aws:region:something' should be invalid
        ✓ 'not even close' should be invalid
        ✓ 42 should be invalid
        ✓ {} should be invalid
        ✓ [ 'arn:aws:region:something' ] should be invalid
      isString
        ✓ 'string' should be valid
        ✓ 42 should be valid
        ✓ [ 'asd' ] should be invalid
        ✓ {} should be invalid
      isInteger
        ✓ 123 should be valid
        ✓ '123' should be valid
        ✓ '-123' should be valid
        ✓ '0' should be valid
        ✓ '-0' should be valid
        ✓ '00' should be valid
        ✓ 123.32 should be invalid
        ✓ '123.32' should be invalid
        ✓ '-123.32' should be invalid
        ✓ '123asdf' should be invalid
        ✓ 'not even close' should be invalid
      isDouble
        ✓ 123 should be valid
        ✓ 123.123 should be valid
        ✓ '123.123' should be valid
        ✓ '0' should be valid
        ✓ '0.0' should be valid
        ✓ '-123.0' should be valid
        ✓ '-123' should be valid
        ✓ '123.32asdf' should be invalid
        ✓ 'not even close' should be invalid
        ✓ '123.123.123' should be invalid
      isBoolean
        ✓ true should be valid
        ✓ false should be valid
        ✓ 'TrUe' should be valid
        ✓ 'FaLse' should be valid
        ✓ 'true' should be valid
        ✓ 'false' should be valid
        ✓ 'true1' should be invalid
        ✓ 'y' should be invalid
        ✓ 1 should be invalid
        ✓ 0 should be invalid
      isJson
        ✓ {} should be valid
        ✓ { obj: { with: 'values' } } should be valid
        ✓ '{}' should be valid
        ✓ '{"obj":{"with":"values"}}' should be valid
        ✓ [] should be invalid
        ✓ 'string' should be invalid
        ✓ '[]' should be invalid
        ✓ '"string"' should be invalid
      isTimestamp
        ✓ '2012-12-30' should be valid
        ✓ '2012-12-30T20:10' should be valid
        ✓ '2012-12-30T20:12Z' should be valid
        ✓ '2012-12-30T20:12:22' should be valid
        ✓ '2012-12-30T20:12:22+01:00' should be valid
        ✓ '2012-12-30T20:12:22+0100' should be valid
        ✓ '2012-12-30T20:12:22-05:00' should be valid
        ✓ '2012-12-30T20:12:22.222' should be valid
        ✓ '2012-12-30T20:12:22.222Z' should be valid
        ✓ '2012-12-30T20:12:22.222222' should be valid
        ✓ '2012' should be invalid
        ✓ '2012-12' should be invalid
        ✓ '2012-12-30T' should be invalid
        ✓ '2012-12-30T10' should be invalid
        ✓ '2012-12-30T20:12:22+1' should be invalid
        ✓ '2012-12-30T20:12:22+100' should be invalid
    type inference unit tests
      inferPrimitiveValueType
        ✓ should be able to infer an Integer value - typeof number
        ✓ should be able to infer an Integer value - typeof string
        ✓ should be able to infer a Double value - typeof number
        ✓ should be able to infer a Double value - typeof string
        ✓ should be able to infer a Boolean value - typeof boolean
        ✓ should be able to infer a Boolean value - typeof string
        ✓ should be able to infer a Json value - typeof object
        ✓ should be able to infer a Json value - typeof string
        ✓ should be able to infer a String value
        ✓ should be able to infer a Timestamp value
        ✓ should be nullipotent upon input data - typeof number
        ✓ should be nullipotent upon input data - typeof string
        ✓ should be nullipotent upon input data - typeof boolean
        ✓ should be nullipotent upon input data - typeof object
      inferStructureValueType
        ✓ should be able to infer a structure value type via Type exact-match
        ✓ should be able to infer a structure value type via Type partial-match
        ✓ should be able to infer a structure value type via property-similiarity matching
        ✓ should not be able to infer a non-structure value type
        ✓ should be nullipotent upon input data
      inferAggregateValueType
        ✓ should be able to infer a List of Strings aggregate value type
        ✓ should be able to infer a List of Json aggregate value type
        ✓ should be able to infer a Map of Strings aggregate value type
        ✓ should be able to infer a Map of Json aggregate value type
        ✓ should not be able to infer a non-aggregate value type
        ✓ should be nullipotent upon input data - List of Strings aggregate value type
        ✓ should be nullipotent upon input data - List of Json aggregate value type
        ✓ should be nullipotent upon input data - Map of Strings aggregate value type
        ✓ should be nullipotent upon input data - Map of Json aggregate value type
      inferValueType
        ✓ should be able to infer a structure value type
        ✓ should be able to infer an aggregate value type
        ✓ should be able to infer a primitive value type
    templateHasUnresolvedIntrinsics
      ✓ should be able to detect if a given template has top-level unresolved intrinsics
      ✓ should be able to detect if a given template has nested unresolved intrinsics
      ✓ should be able to detect if a given template does not contain unresolved intrinsics
    SAM-20161031
      ✓ a sample AWS template (sam_20161031_alexa_skill.yaml) should validate successfully (386ms)
      ✓ a sample AWS template (sam_20161031_all_policy_templates.yaml) should validate successfully (300ms)
      ✓ a sample AWS template (sam_20161031_api_backend.yaml) should validate successfully (1476ms)
      ✓ a sample AWS template (sam_20161031_api_swagger_cors.yaml) should validate successfully (782ms)
      ✓ a sample AWS template (sam_20161031_cloudwatch_logs.yaml) should validate successfully (463ms)
      ✓ a sample AWS template (sam_20161031_encryption_proxy.yaml) should validate successfully (1006ms)
      ✓ a sample AWS template (sam_20161031_hello_world.yaml) should validate successfully (274ms)
      ✓ a sample AWS template (sam_20161031_implicit_api_settings.yaml) should validate successfully (794ms)
      ✓ a sample AWS template (sam_20161031_inline_swagger.yaml) should validate successfully (606ms)
      ✓ a sample AWS template (sam_20161031_iot_backend.yaml) should validate successfully (736ms)
      ✓ a sample AWS template (sam_20161031_lambda_edge.yaml) should validate successfully (293ms)
      ✓ a sample AWS template (sam_20161031_lambda_safe_deployments.yaml) should validate successfully (508ms)
      ✓ a sample AWS template (sam_20161031_s3_processor.yaml) should validate successfully (488ms)
      ✓ a sample AWS template (sam_20161031_schedule.yaml) should validate successfully (550ms)
      ✓ a sample AWS template (sam_20161031_stream_processor.yaml) should validate successfully (487ms)
      ✓ a template missing a required property should fail validation (323ms)
      ✓ a template containing an aggregate-type that has items with different types (sam_20161031_heterogenous_aggregation.yaml) should validate successfully (824ms)
      ✓ a template containing a valid SAM Globals section should validate successfully (819ms)
      ✓ a template containing an invalid SAM Globals resource type should fail validation (143ms)
      ✓ a template containing an invalid SAM Globals property name should fail validation (142ms)
      ✓ a valid real-world SAM template (sam_20161031_realworld_1.yaml) should validate successfully (956ms)
      ✓ a invalid APIGateway::Stage.MethodSettings type (sam_20161031_api_methodsettings_not_a_list.yaml) should invalidate successfully (776ms)
      ✓ a valid APIGateway::Stage.MethodSettings containing incomplete APIGateway::Stage.MethodSetting (sam_20161031_api_methodsettings_missing_required.yaml) should invalidate successfully (832ms)
      ✓ a valid template with Ref in Globals (sam_20161031_environment_ref.yaml) should validate successfully (159ms)

  yamlSchema
    buildYamlSchema
      ✓ should build a yaml schema
    functionTag
      ✓ should work on a Fn::Thing
      ✓ should work on a Thing
    buildYamlType
      ✓ should return a type that builds the JSON representation of the yaml tag
      ✓ should special-case Fn::GetAtt


  470 passing (30s)

