/// <reference types="node" />
import { Template } from "cloudform-types";
import Transformer from '../Transformer';
export interface ProjectOptions {
    projectDirectory: string;
    transformers: Transformer[];
    rootStackFileName?: string;
}
export declare function buildProject(opts: ProjectOptions): Promise<void>;
export declare function readSchema(projectDirectory: string): Promise<any>;
/**
 * Given an absolute path to an amplify project directory, load the
 * user defined configuration.
 */
interface ProjectConfiguration {
    schema: string;
    resolvers: {
        [k: string]: string;
    };
    stacks: {
        [k: string]: Template;
    };
    config: TransformConfig;
}
export declare function readProjectConfiguration(projectDirectory: string): Promise<ProjectConfiguration>;
export interface UploadOptions {
    directory: string;
    upload(blob: {
        Key: string;
        Body: Buffer | string;
    }): Promise<string>;
}
/**
 * Reads deployment assets from disk and uploads to the cloud via an uploader.
 * @param opts Deployment options.
 */
export declare function uploadDeployment(opts: UploadOptions): Promise<void>;
interface MigrationOptions {
    projectDirectory: string;
    cloudBackendDirectory?: string;
}
/**
 * Using the current cloudbackend as the source of truth of the current env,
 * move the deployment forward to the intermediate stage before allowing the
 * rest of the deployment to take place.
 * @param opts
 */
export declare function migrateAPIProject(opts: MigrationOptions): Promise<{
    project: any;
    cloudBackend: any;
}>;
export declare function revertAPIMigration(directory: string, oldProject: AmplifyApiV1Project): Promise<void>;
interface AmplifyApiV1Project {
    schema: string;
    parameters: any;
    template: Template;
}
/**
 * Read the configuration for the old version of amplify CLI.
 */
export declare function readV1ProjectConfiguration(projectDirectory: string): Promise<AmplifyApiV1Project>;
/**
 * TransformConfig records a set of logical ids that should be preserved
 * in the top level template to prevent deleting resources that holds data and
 * that were created before the new nested stack config.
 */
interface TransformMigrationConfig {
    V1?: {
        Resources: string[];
    };
}
interface TransformConfig {
    Migration?: TransformMigrationConfig;
}
export declare function makeTransformConfigFromOldProject(project: AmplifyApiV1Project): TransformConfig;
export {};
